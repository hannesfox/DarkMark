# .github/workflows/main.yml
# Finale Version: Erstellt einen Ordner (.exe + Abhängigkeiten) für Windows und ein Standard .app-Bundle für macOS

name: Build and Release DarkMark Application

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-release:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install PyInstaller and Application Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir pyinstaller==6.8.0
        pip install --no-cache-dir Pillow # Sicherstellen, dass Pillow für sips/magick Konvertierung verfügbar ist
        pip install --no-cache-dir -r requirements.txt
      timeout-minutes: 10

    # Schritt zur Generierung der Plattform-spezifischen Icons
    - name: Generate Platform Icons from assets/logo.png
      run: |
        ICON_SOURCE_PNG="assets/logo.png"
        
        # Generiere Windows .ico
        if [ "$RUNNER_OS" == "Windows" ]; then
          # Installiere ImageMagick über Chocolatey und erzwinge Neuinstallation für neueste Version
          choco install imagemagick --force --no-progress
          # Skaliere das PNG zuerst auf eine sichere Maximalgröße (z.B. 256x256) für ICO
          magick "$ICON_SOURCE_PNG" -resize 256x256 scaled_icon_source.png
          # Konvertiere das skalierte PNG zu ICO mit allen gängigen Größen
          magick convert scaled_icon_source.png -define icon:autoresize=256,128,64,48,32,16 icon.ico
          echo "DEBUG: icon.ico created for Windows."
        fi

        # Generiere macOS .icns
        if [ "$RUNNER_OS" == "macOS" ]; then
          mkdir icon.iconset
          # Skaliere das PNG zuerst auf eine sichere Maximalgröße (z.B. 512x512) für ICNS (höhere Auflösung für Retina)
          sips -z 512 512 "$ICON_SOURCE_PNG" --out scaled_icon_source.png
          
          # Erstelle alle benötigten PNG-Größen für .icns aus dem skalierten Bild
          sips -z 16 16 scaled_icon_source.png --out icon.iconset/icon_16x16.png
          sips -z 32 32 scaled_icon_source.png --out icon.iconset/icon_16x16@2x.png
          sips -z 32 32 scaled_icon_source.png --out icon.iconset/icon_32x32.png
          sips -z 64 64 scaled_icon_source.png --out icon.iconset/icon_32x32@2x.png
          sips -z 128 128 scaled_icon_source.png --out icon.iconset/icon_64x64.png
          sips -z 256 256 scaled_icon_source.png --out icon.iconset/icon_128x128@2x.png
          sips -z 256 256 scaled_icon_source.png --out icon.iconset/icon_256x256.png
          sips -z 512 512 scaled_icon_source.png --out icon.iconset/icon_256x256@2x.png
          sips -z 1024 1024 scaled_icon_source.png --out icon.iconset/icon_512x512@2x.png # 512x512@2x = 1024x1024px
          
          # Erstelle .icns aus dem .iconset Ordner
          iconutil -c icns icon.iconset -o icon.icns
          echo "DEBUG: icon.icns created for macOS."
          rm -r icon.iconset # Aufräumen des temporären Ordners
        fi
        rm scaled_icon_source.png 2>/dev/null || true # Temporäres skaliertes Bild aufräumen
      shell: bash


    - name: Extract version from tag
      id: get_version
      if: startsWith(github.ref, 'refs/tags/')
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Build Application with PyInstaller
      timeout-minutes: 20
      run: |
        APP_VERSION=${{ steps.get_version.outputs.VERSION || 'dev' }}
        echo "Building version $APP_VERSION"
        
        DATA_SEPARATOR=$([ "$RUNNER_OS" == "Windows" ] && echo ";" || echo ":")
        
        args=(
          --noconfirm
          main.py
          --name "DarkMark"
          --clean
          --add-data "assets${DATA_SEPARATOR}assets" 
          --hidden-import "PySide6.QtSvg"
          --hidden-import "PySide6.QtNetwork"
          --hidden-import "qtawesome"
          --hidden-import "PIL.ImageQt"
        )

        # KORRIGIERT: ICON_PARAM muss wieder explizit hinzugefügt werden
        if [ "$RUNNER_OS" == "Windows" ]; then
          args+=(--icon "icon.ico")
        elif [ "$RUNNER_OS" == "macOS" ]; then
          args+=(--icon "icon.icns")
        fi

        # --windowed Mode hinzufügen (unterdrückt Konsolenfenster)
        if [ "$RUNNER_OS" == "Windows" ] || [ "$RUNNER_OS" == "macOS" ]; then
          args+=(--windowed)
        fi

        pyinstaller "${args[@]}"
      shell: bash

    - name: Debug PyInstaller Output on macOS
      if: runner.os == 'macOS'
      run: |
        echo "Contents of dist directory:"
        ls -R dist
        echo "Done listing dist directory."
      shell: bash

    - name: Prepare Windows Release Artifact
      if: runner.os == 'Windows'
      id: prepare_win
      shell: powershell
      run: |
        $APP_VERSION = "${{ steps.get_version.outputs.VERSION || 'dev' }}"
        $SOURCE_PATH = "dist/DarkMark" 
        $ARTIFACT_NAME = "DarkMark-v$($APP_VERSION)-windows.zip"
        Compress-Archive -Path $SOURCE_PATH -DestinationPath $ARTIFACT_NAME -Force
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Prepare macOS Release Artifact
      if: runner.os == 'macOS'
      id: prepare_mac
      shell: bash
      run: |
        APP_VERSION="${{ steps.get_version.outputs.VERSION || 'dev' }}"
        ARTIFACT_NAME="DarkMark-v${APP_VERSION}-macos.zip"
        if [ ! -d "dist/DarkMark.app" ]; then
          echo "Error: dist/DarkMark.app not found. PyInstaller build failed for macOS?"
          exit 1
        fi
        ditto -c -k --sequesterRsrc --keepParent "dist/DarkMark.app" "${ARTIFACT_NAME}"
        echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: DarkMark-Build-${{ matrix.os }}
        path: ${{ steps.prepare_win.outputs.ARTIFACT_NAME || steps.prepare_mac.outputs.ARTIFACT_NAME }}
        if-no-files-found: error

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          DarkMark-v${{ steps.get_version.outputs.VERSION }}-windows.zip
          DarkMark-v${{ steps.get_version.outputs.VERSION }}-macos.zip